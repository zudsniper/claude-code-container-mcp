name: Build and Release

on:
  push:
    branches: [ release ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag for Docker images'
        required: false
        default: ''

env:
  NPM_PACKAGE: 'claude-code-container-mcp'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-new: ${{ steps.version.outputs.is-new }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get package version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this version already exists as a git tag
          if git tag --list | grep -q "^v$VERSION$"; then
            echo "is-new=false" >> $GITHUB_OUTPUT
            echo "::warning::Version $VERSION already exists as a git tag"
          else
            echo "is-new=true" >> $GITHUB_OUTPUT
            echo "New version detected: $VERSION"
          fi

  test:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.is-new == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test

  publish-npm:
    runs-on: ubuntu-latest
    needs: [check-version, test]
    if: needs.check-version.outputs.is-new == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Build project
        run: npm run build

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-docker:
    runs-on: ubuntu-latest
    needs: [check-version, test]
    if: needs.check-version.outputs.is-new == 'true'
    strategy:
      matrix:
        image:
          - name: claude-code-container-mcp
            dockerfile: Dockerfile
            context: .
          - name: claude-code-custom
            dockerfile: Dockerfile.custom
            context: .
          - name: claude-code-mcp
            dockerfile: Dockerfile.mcp
            context: .
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image.name }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.check-version.outputs.version }}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    runs-on: ubuntu-latest
    needs: [check-version, test, publish-npm, build-docker]
    if: needs.check-version.outputs.is-new == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ needs.check-version.outputs.version }}" -m "Release v${{ needs.check-version.outputs.version }}"
          git push origin "v${{ needs.check-version.outputs.version }}"

      - name: Generate release notes
        id: release-notes
        run: |
          # Get the previous version tag
          PREV_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Generate changelog
          echo "## Changes" > release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%h)" "$PREV_TAG"..HEAD >> release_notes.md
          echo "" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Docker Images" >> release_notes.md
          echo "" >> release_notes.md
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/claude-code-container-mcp:${{ needs.check-version.outputs.version }}\`" >> release_notes.md
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/claude-code-custom:${{ needs.check-version.outputs.version }}\`" >> release_notes.md
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/claude-code-mcp:${{ needs.check-version.outputs.version }}\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## NPM Package" >> release_notes.md
          echo "" >> release_notes.md
          echo "- \`${{ env.NPM_PACKAGE }}@${{ needs.check-version.outputs.version }}\`" >> release_notes.md

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Release v${{ needs.check-version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  notify-success:
    runs-on: ubuntu-latest
    needs: [check-version, create-release]
    if: needs.check-version.outputs.is-new == 'true' && success()
    steps:
      - name: Success notification
        run: |
          echo "‚úÖ Release v${{ needs.check-version.outputs.version }} completed successfully!"
          echo "üì¶ NPM: ${{ env.NPM_PACKAGE }}@${{ needs.check-version.outputs.version }}"
          echo "üê≥ Docker images:"
          echo "  - ${{ secrets.DOCKERHUB_USERNAME }}/claude-code-container-mcp:${{ needs.check-version.outputs.version }}"
          echo "  - ${{ secrets.DOCKERHUB_USERNAME }}/claude-code-custom:${{ needs.check-version.outputs.version }}"
          echo "  - ${{ secrets.DOCKERHUB_USERNAME }}/claude-code-mcp:${{ needs.check-version.outputs.version }}"

  notify-skipped:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.is-new == 'false'
    steps:
      - name: Skipped notification
        run: |
          echo "‚ö†Ô∏è Release skipped - version ${{ needs.check-version.outputs.version }} already exists"
          echo "To create a new release, update the version in package.json"